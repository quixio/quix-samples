# timeout: 95
services:
  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 3s
      timeout: 5s
      retries: 10
    stop_grace_period: 3s
  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.4
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092
      - --advertise-kafka-addr internal://kafka:9092
      - --mode dev-container
      - --smp 1
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - test-network
    stop_grace_period: 3s
  mongodb-destination:
    build:
      context: ../../../python/destinations/mongodb
      dockerfile: Dockerfile
    environment:
      - Quix__Broker__Address=kafka:9092
      - input=test-mongodb-input
      - CONSUMER_GROUP_NAME=mongodb-test-consumer
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_USERNAME=admin
      - MONGODB_PASSWORD=password
      - MONGODB_DB=testdb
      - MONGODB_COLLECTION=testcollection
      - BUFFER_SIZE=1
      - BUFFER_DELAY=0.1
    networks:
      - test-network
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    stop_grace_period: 3s
  test-runner:
    build:
      context: ../../framework
      dockerfile: Dockerfile
    environment:
      - Quix__Broker__Address=kafka:9092
      - TEST_INPUT_TOPIC=test-mongodb-input
      - TEST_MESSAGE_COUNT=1
    command: >
      sh -c "
        echo 'Installing MongoDB client...' &&
        pip install pymongo > /dev/null 2>&1 &&
        echo 'Producing test messages to Kafka...' &&
        python /tests/produce_test_data.py &&
        echo 'Waiting for mongodb-destination to process messages...' &&
        sleep 15 &&
        echo 'Verifying data in MongoDB...' &&
        python /tests/verify_output.py
      "
    volumes:
      - ./produce_test_data.py:/tests/produce_test_data.py:ro
      - ./verify_output.py:/tests/verify_output.py:ro
    working_dir: /
    networks:
      - test-network
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mongodb-destination:
        condition: service_started
    stop_grace_period: 3s
networks:
  test-network:
    driver: bridge
